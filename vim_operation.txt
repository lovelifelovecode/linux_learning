(参考 http://www.runoob.com/linux/linux-vim.html 》》vi/vim 按键说明) 
第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等
移动光标的方法
h 或 向左箭头键(←) 	光标向左移动一个字符
j 或 向下箭头键(↓) 	光标向下移动一个字符
k 或 向上箭头键(↑) 	光标向上移动一个字符
l 或 向右箭头键(→) 	光标向右移动一个字符
如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！
[Ctrl] + [f] 	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
[Ctrl] + [b] 	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)
[Ctrl] + [d] 	屏幕『向下』移动半页
[Ctrl] + [u] 	屏幕『向上』移动半页
+ 	光标移动到非空格符的下一行
- 	光标移动到非空格符的上一行
n<space> 	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
$ 或功能键[End] 	移动到这一行的最后面字符处(常用)
H 	光标移动到这个屏幕的最上方那一行的第一个字符
M 	光标移动到这个屏幕的中央那一行的第一个字符
L 	光标移动到这个屏幕的最下方那一行的第一个字符
G 	移动到这个档案的最后一行(常用)
nG 	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
gg 	移动到这个档案的第一行，相当于 1G 啊！ (常用)
n<Enter> 	n 为数字。光标向下移动 n 行(常用)
搜索替换
/word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
?word 	向光标之上寻找一个字符串名称为 word 的字符串。
n 	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N 	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！
:n1,n2s/word1/word2/g 	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。(常用)
:1,$s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
:1,$s/word1/word2/gc 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)
删除、复制与贴上
x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
dd 	删除游标所在的那一整行(常用)
ndd 	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
d1G 	删除光标所在到第一行的所有数据
dG 	删除光标所在到最后一行的所有数据
d$ 	删除游标所在处，到该行的最后一个字符
d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy 	复制游标所在的那一行(常用)
nyy 	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
y1G 	复制游标所在行到第一行的所有数据
yG 	复制游标所在行到最后一行的所有数据
y0 	复制光标所在的那个字符到该行行首的所有数据
y$ 	复制光标所在的那个字符到该行行尾的所有数据
p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
J 	将光标所在行与下一行的数据结合成同一行
c 	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u 	复原前一个动作。(常用)
[Ctrl]+r 	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
. 	不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)


第二部份：一般模式切换到编辑模式的可用的按钮说明
进入插入或取代的编辑模式
i, I 	进入插入模式(Insert mode)：
i 为『从目前光标所在处插入』， I 为『在目前所在行的第一个非空格符处开始插入』。 (常用)
a, A 	进入插入模式(Insert mode)：
a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光标所在行的最后一个字符处开始插入』。(常用)
o, O 	进入插入模式(Insert mode)：
这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插入新的一行』； O 为在目前光标所在处的上一行插入新的一行！(常用)
r, R 	进入取代模式(Replace mode)：
r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)
上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！
[Esc] 	退出编辑模式，回到一般模式中(常用)


第三部份：一般模式切换到指令行模式的可用的按钮说明
指令行的储存、离开等指令
:w 	将编辑的数据写入硬盘档案中(常用)
:w! 	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！
:q 	离开 vi (常用)
:q! 	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
:wq 	储存后离开，若为 :wq! 则为强制储存后离开 (常用)
ZZ 	这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
:w [filename] 	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename] 	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
:n1,n2 w [filename] 	将 n1 到 n2 的内容储存成 filename 这个档案。
:! command 	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如
『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！
vim 环境的变更
:set nu 	显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu 	与 set nu 相反，为取消行号！

特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。

举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。


零散记录>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
字符移动

k            上移                k
h            左移            h        l
l            右移                j
j            下移


单词移动
W w            移动到下一个单词开头
E e            移动到下一个单词结尾
B b            倒退到上一个单词开头

j k也是移动到上一行和下一行，但它们移动的是光标所在的位置
+ -不管你的光标在何处，总是移动到下一行或上一行的行首


整行移动

0            移动到行首
$            移动到行末
+            移动到下一行开头
-            移动到上一行开头



滚屏
Ctrl+f            往前滚动一整屏
Ctrl+b            往后滚动一整屏
Ctrl+d            往前滚动半屏
Ctrl+u            往后滚动半屏

Ctrl+e            往后滚动一行        
Ctrl+y            往前滚动一行



用z调整光标
z<Enter>        将光标所在行移动到屏幕顶端
z.              将光标所在行移动到屏幕中间
z-              将光标所在行移动到屏幕低端

在屏幕中移动

H            移动到屏幕顶端的行
M            移动到屏幕中央的行
L            移动到屏幕底端的行

nH           移动到屏幕顶端往下的第n行
nL           移动到屏幕顶端往上的第n行


根据文本块移动
所谓的文本块也就是句子、段落、小节等

（            移动到当前句子开头
）            移动到下一个句子开头
{            移动到当前这一段开头   
}            移动到下一段开头
[[           移动到当前这一节的开头
]]           移动到下一节的开头

其中，VIM以? . !等符号来标记一个句子

空白行来标记一个段落

用节宏来标记一个节（节宏是什么我还没搞清楚）


根据行号来移动

Ctrl+g            显示当前行信息
nG                转至第n行
G                 转至文本末尾
gg　　　　　　　　   移至文本开头


字符位置插入

i            在光标之前插入
a            在光标之后追加


行位置插入

A            在一行的结尾处追加
I            在一行的开头处插入
o            在光标所在位置的下一行打开新行插入
O            在光标所在位置的上一行打开新行插入

tips1：10i*<Esc>先输入10,然后输入i，接着输入*号，最后按<Esc>
　　  　这样就可以在一行开头输入十个*

合并行 J
合并7行  7J


字符删除

x            删除光标所在处字符
X            删除光标所在前字符



单词删除

dw            删除到下一个单词开头
de            删除到本单词末尾
dE            删除到本单词末尾包括标点在内
db            删除到前一个单词
dB            删除到前一个单词包括标点在内


行删除

dd            删除一整行
d$          删除光标位置到本行结尾
d0            删除光标位置到本行开头


字符替换

r            单个字符替换
R            连续替换
～           更改大小写

tips：4～更改连续4个字符的大小写，很有意思


单词修改

cw            从光标处修改到单词结尾
cb            从光标处修改到单词开头


行修改

c$            从光标修改到本行末尾
C             功能同上
c0            从光标修改到本行开头
cc            删除整行从头修改
S             功能同上
s             删除光标所在位置的字符，然后插入

tips:c 功能和d相同，区别在于完成删除操作后进入INSERT MODE

粘帖

p            粘帖                  


单词和字符复制

ynl            向右复制n个字符
ynh            向左复制n个字符
ynw            向前复制n个单词
ynb            向后复制n个单词


行复制

y0            复制到行首
y$            复制到行末
yy            复制整行
yH            从当前行复制到屏幕顶端
yL            从当前行复制到屏幕低端


剪切

说完了复制这里顺便把剪切的命令也说下
其实剪切很简单，就是先删除，然后按p粘帖
比如dd删除一行后，这一行会被放入缓冲区
接着移动到你想放置的位置，按p，就被粘帖好了


恢复

u            撤消上次命令
U            恢复整行
ctrl+r       重做
.            重复
e！          全文恢复



Vim快速选中、删除、复制引号或括号中的内容
以下命令可以对标点内的内容进行操作。
ci'、ci"、ci(、ci[、ci{、ci< - 分别更改这些配对标点符号中的文本内容
di'、di"、di(或dib、di[、di{或diB、di< - 分别删除这些配对标点符号中的文本内容
yi'、yi"、yi(、yi[、yi{、yi< - 分别复制这些配对标点符号中的文本内容
vi'、vi"、vi(、vi[、vi{、vi< - 分别选中这些配对标点符号中的文本内容

另外如果把上面的i改成a可以连配对标点一起操作。


更大范围的移动：
*         当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；
#         当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；
g_      到本行最后一个不是 blank 字符的位置。
fa      到下一个为 a 的字符处，你也可以fs到下一个为s的字符。
3fa        在当前行查找第三个出现的 a.


替换和删除
nrc 用 c 替换光标所指向的前 n 个字符;
5rA 用 A 替换光标所指向的前 5 个字符;

s 用输入的正文替换光标所指向的字符;
S 删除当前行，并进入插入模式;
ns 用输入的正文替换光标右侧 n 个字符;
nS 删除当前行在内的 n 行，并进入插入模式;
cW 用输入的正文替换从光标到行尾的所有字符（同 c$ );


复制粘贴
p               小写字母 p，将缓冲区的内容粘贴到光标的后面；
P               大写字母 P，将缓冲区的内容粘贴到光标的前面。

“+y          复制 1 行到操作系统的粘贴板；
“+nyy          复制 n 行到操作系统的粘贴板。



命令模式下，可以规定命令操作的行号范围。数值用来指定绝对行号；字符“.”表示光标所在行的行号；字符符“$”表示正文最后一行的行号；简单的表达式，例如“.+5”表示当前行往下的第 5 行。例如：

:345                  将光标移到第 345 行
:345w file          将第 345 行写入 file 文件
:3,5w file          将第 3 行至第 5 行写入 file 文件
:1,.w file          将第 1 行至当前行写入 file 文件
:.,$w file          将当前行至最后一行写入 file 文件
:.,.+5w file          从当前行开始将 6 行内容写入 file 文件
:1,$w file          将所有内容写入 file 文件，相当于 :w file 命令


字符串搜索

:/str/                正向搜索，将光标移到下一个包含字符串 str 的行
:?str?                反向搜索，将光标移到上一个包含字符串 str 的行


Vim中的正则表达式
下表给出大多数特殊字符和它们的含义：

^               放在字符串前面，匹配行首的字；
$               放在字符串后面，匹配行尾的字；
\<             匹配一个字的字头；
\>             匹配一个字的字尾；
.               匹配任何单个正文字符；
[str]           匹配 str 中的任何单个字符；
[^str]         匹配任何不在 str 中的单个字符；
[a-b]           匹配 a 到 b 之间的任一字符；
*               匹配前一个字符的 0 次或多次出现；
\               转义后面的字符。

ps:
:/^string/


正文替换
利用 :s 命令可以实现字符串的替换。具体的用法包括：

:%s/str1/str2/      用字符串 str2 替换行中首次出现的字符串 str1
:s/str1/str2/g      用字符串 str2 替换行中所有出现的字符串 str1
:.,$ s/str1/str2/g  用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1
:1,$ s/str1/str2/g  用字符串 str2 替换正文中所有出现的字符串 str1
:g/str1/s//str2/g    功能同上
:m,ns/str1/str2/g    将从m行到n行的str1替换成str2

`g` 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 `g`，表示只对搜索字符串的首次出现进行替换；`g` 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;
`s` 表示后面跟着一串替换的命令；
`%` 表示替换范围是所有行，即全文。



删除正文
在命令模式下，同样可以删除正文中的内容。例如：

:d                            删除光标所在行
:3d                          删除 3 行
:.,$d                          删除当前行至正文的末尾
:/str1/,/str2/d              删除从字符串 str1 到 str2 的所有行
:g/^\(.*\)$\n\1$/d              删除连续相同的行，保留最后一行
:g/\%(^\1$\n\)\@<=\(.*\)$/d     删除连续相同的行，保留最开始一行
:g/^\s*$\n\s*$/d                删除连续多个空行，只保留一行空行
:5,20s/^#//g                    删除5到20行开头的 # 注释

总之，Vim的初级删除命令是用 d ，高级删除命令可以用 正则替换 的方式执行。




恢复文件

Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项



Shell切换

当处于编辑的对话过程中时，可能需要执行一些Linux命令。如果需要保存当前的结果，退出编辑程序，再执行所需的Linux命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行Linux命令就要省事得多。在Vim中，可以用下面的命令来做到这一点：

:!shell_command   执行完 shell_command 后回到Vim



分屏
普通的Vim模式，打开一个Vim程序只能查看一个文件，如果想同时查看多个文件，就需要用到Vim分屏与标签页功能。
Vim的分屏，主要有两种方式：上下分屏（水平分屏）和左右分屏（垂直分屏），在命令模式分别敲入以下命令即可：

:split file2（可用缩写 :sp）            上下分屏；
:vsplit file2（可用缩写 :vsp）        左右分屏。

另外，也可以在终端里启动vim时就开启分屏操作：
vim -On file1 file2...   打开 file1 和 file2 ，垂直分屏
vim -on file1 file2...   打开 file1 和 file2 ，水平分屏

理论上，一个Vim窗口，可以分为多个Vim屏幕，切换屏幕需要用键盘快捷键，命令分别有：
Ctrl+w+h            切换到当前分屏的左边一屏；
Ctrl+w+l            切换到当前分屏的右边一屏；
Ctrl+w+j            切换到当前分屏的下方一屏；
Ctrl+w+k            切换到当前分屏的上方一屏。

即键盘上的h,j,k,l 四个Vim专用方向键，配合Ctrl键和w键（window的缩写），就能跳转到目标分屏。



签页
Vim的标签（Tab）页，类似浏览器的标签页，一个标签页打开一个Vim的窗口，一个Vim的窗口可以支持N个分屏。

在Vim中新建一个标签的命令是：
:tabnew

如果要在新建标签页的同时打开一个文件，则可以在命令后面直接附带文件路径：
:tabnew filename

Vim中的每个标签页有一个唯一的数字序号，第一个标签页的序号是0，从左向右依次加一。关于标签页有一系列操作命令，简介如下：

:tabN[ext]              跳到上一个标签页
:tabn[ext]              转到下一个标签页
:tabc[lose]             关闭当前标签页
:tabdo                  为每个标签页执行命令
:tabe[dit]              在新标签页里编辑文件
:tabf[ind]              寻找 'path' 里的文件，在新标签页里编辑之
:tabfir[st]             转到第一个标签页
:tabl[ast]              转到最后一个标签页
:tabm[ove]  N           把标签页移到序号为N位置
:tabnew [filename]      在新标签页里编辑文件
:tabo[nly]              关闭所有除了当前标签页以外的所有标签页
:tabp[revious]          转到前一个标签页
:tabr[ewind]            转到第一个标签页


:x  #保存当前文件再退出
w：移动到下一个单词的起始处（既然是w，代表的意思就是word，好记吧）
W：移动到下一个单词的起始处
那么w和W它俩有什么区别呢，w会把一个单词理解成由连续的字母或数字或特殊字符，而W却以空格来识别是否到了下一个单词，一图胜千言

b：移动到前一个单词的起始处
B：移动到前一个单词的起始处（b和B的区别与w和W是同理的）


光标在一行内的移动
0（零）：移动到行首
$：移动到行未
^：移动到当前行的第一个非空字符处（如果该行首没有空格，那么效果与0是一样的）
g_：移动到当前行的最后一个非空格字符处


:r filename：把文件名为filename的内容插入当当前行的下一行
:r! command：把command返回的结果插入到当前行的下一行

配置
注：以下配置只能在当前vim窗口（Session）中生效，以后我们再了解如何在把这些设置写入配置文件中。
:set tabstop=4   #设置tab默认为4个空格
：set nu     #vim窗口左侧显示行号
：set ruler  #在vim窗口显示当前光标位置


简单搜索
在normal模式下，使用斜杠 /string (string 就是你要搜索的字符串），它是向下搜索，如果有多个string，那么可以用n往下查找。 ?string与/string相反，是往上搜，同样用n才查找下一个与之匹配的字符串。*就是往上找。

如果是要忽略大小写，估计你都猜出来了，:set ignorecase，这样一来，无论是String 还是 STRING都会去匹配。

上面这种方式如果是碰到一个aastringaa这样的字符串，同样会匹配到，如果把它忽略呢，用关键字 /\<string\>“>"匹配结尾处，"<"匹配开始处。如：/\<string\>


替换
vim可以借用正则表达式来实现丰富的替换功能，她的基本语法是：
:[addr]s/源字符串/目的字符串/[option]，我们可以看出addr和option是可以缺省不填的，他们各个字段的意思是：

[addr]代表检索范围，缺省表示当前行，1，10表示1到10行，%代表整个文件等价于1,$，而.,$代表当前行到文件末尾
s代表替换的意思
option代表操作类型，缺省只对第一个匹配的字符进行替换，g代表全局替换,c代表操作时确认，gc可以组合使用
以下提供几个例子.

:s/aa/bb/g       将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
:%s/aa/bb/g      将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:12,23s/aa/bb/g  将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:%s/^/#/         全文的行首加入 # 字符,批量注释的时候非常有用
:%s= *$==        将所有行尾多余的空格删除
:g/^$/d          这里的g表示对文章中所有符合要求字符串执行替换操作，^表示行首,$表示行尾，整个意思是：将所有的空行删除.


文件列表：
启动vim时，可以同时打开多个文件：vim a.py b.py c.py ，窗口会显示一个文件，如果想切换到b.py文件，可以用命令：:next，前提是当前的这个文件需要先保存，你也可以用:next!强制切换到b.py，放弃当前的保存工作。向前切换使用:previous,规则与next一样。

其他相似命令：
:last
:first
:wnext
:2next:
:wprevious
不言而喻，很直白。

:args：查看vim打开了哪些文件，当前编辑的是哪个文件。打开另一组文件列表：:args a.java b.java c.java
因为这些文件都是在同一个session中，所以，从a文件中yy（yank复制)一行p（paste)到b文件是没问题的。



C or c$ 表示修改当前行上光标后面的部分. 进入编辑状态.
cc OR S修改当前行. 进入编辑状态.
cfx AND cFx这里的 x 为一任意字符, cfx 表示修改从光标到下一个字符 x 之间的文本;
cFx 表示修改从光标到上一个字符 x 之间的文本.
cnG and cG这里的 n 为一任意自然数, cnG 表示修改当前行到第 n 行之间的所有行;
cG 表示修改当前行直至末行. 


:e filename   打开文件编辑

搜索
/jo[ha]n       搜索john或joan
/\<the        搜索the或theatre 或then（只要是the开头就行）
/the\>         搜索the或breathe（只要是the结尾就行）
/\<the\>      只搜索the
/\<....\>     搜索长度为4个字符的字符串
/\<fred\>      搜索fred，alfred 或者 frederick都不能匹配
/fred\|joe     搜fred或joe
/\<\d\d\d\d\>  搜索4位数字的字符串
/^\n\{3}       查找3个空行的地方
:bufdo /searchstr/    在所有打开的（缓冲区）文件中搜索searchstr
:bufdo %s/pattern/replace/ge | update   所有文件中替换


替换
:%s/old/new/g          用new替换文件中出现的所有old
:%s/old/new/gc         与上面这条的作用一样，只不过每替换一个就要确认一次
:2,35s/old/new/g       用new替换2到35行的new
:5,$s/old/new/g        替换4行之后所有old
:%s/^/hello/g          用hello替换所有行首，相当于在行首插入hello
:%s/$/Harry/g          在所有行末加入Harray
:%s/onward/forward/gi  用forward替换onward，忽略大小写
:%s/ *$//g         删除所有行末的空格
:%s/^ *//g         删除所有行首的空格
:g/string/d        删除所有出现有string的行
:v/string/d        删除所有不包含string的行
:s/Bill/Steve/     用Steve替换当前行首次出现的Bill
:s/Bill/Steve/g    用Steve替换当前行出现的所有Bill
:%s#<[^>]\+>##g    删除所有HTMl标签，保留文本
dit   保留当前行html标签，删除文本
:%s/^\(.*\)\n\1$/\1/    Delete lines which appears twice
Ctrl+a    递增当前光标出的数字
Ctrl+x    递减当前光标处的数字
ggVGg?    将全文转换为rot13码，这是一种简单暗号语Rot13，重复执行此命令回复原样


大小写
Vu    当前行转换为小写
VU    当前行转换为大写，当然对中文无效
g~~    大小写置换
vEU    选择性的转换为大小，从光标起始处到
veU
vE~    也是将选中的大写转小写，小写转大写。
ggguG    全文小写，其实我们可以拆分3个命令gg/gu/来记忆
:set ignorecase    搜索时忽略大小写

自动补全

单词自动补全：
CTRL+n ：当你输入第一个字母的时候，再CTRL+n，自动出现下拉菜单，单词默认选中第一个，继续CTRL+n，CTRL+p可以上下切换，或者用方向键（太慢）
CTRL+p ：同上，只是默认的选中的是列表中最后一个单词
learning to this :每日一Vim（7）自动补全

行自动补全：
CTRL+x CTRL+l (l指小写的L )：两个命令组合使用。在插入模式下输入已经存在行的第一个单词，再按这两个键，就会列出该整行出来

文件名自动补全：
CTRL+x CTRL+f ：插入模式下，按这两个组合键，可以插入当前目录下的文件名。处用在哪里呢，当然是有时候我们要指定默认执行文件的路径，这样就方便啦。

字典补全：
首先在~/.vimrc加入如下代码，注意这是在Linux，windows下应该是C:\Users\$username(用户名）
set dictionary-=$VIM/dic.txt dictionary+=$VIM/dic.txt
dic.txt中的单词一每行一个单词来分割的
CTRL+x CTRL+k 就能看到dic.txt中定义的单词的，如果你还麻烦，想直接CTRL+n就显示其中的列表的话，再配置一下.vimrc文件：
set complete-=k complete+=k


Vim寄存器>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	先抛出一个问题：每次打开Vim，想找一段文本来练练手，于是打开网页copy了一段，问题来了，怎样粘贴到vim的编辑器里头去呢？如果你还在CTRL+v的话，说明你还无法割舍Windows，就像东方姑娘忘不了令狐冲):这里暂且告诉你如何粘贴：SHIFT+INSERT 两个键联合起来。再来看下面的原理 

	寄存器是Vim用来存储文件的临时空间，当使用命令y（yank）或d（delete）复制删除文本时，该文本就会被保存在寄存器中，通过p（put）命令插入刚删除或复制的内容。vim的寄存器分为不同的种类：

	数字寄存器：
	在normal模式下输入:reg，您是否看到很多“（双引号）开头的数字了呢，这些都是寄存器，（如果暂时没看到，那么在对文本做几个操作，比如：dd,yy等），这些寄存器里保存了最近删除的和复制的文本。

	数字寄存器有十个，分别是："0，"1，"2... "9（注意：数字前有个双引号），寄存器"0保存上一次复制(y)操作的文本，"1到"9寄存器保存最近9次删除的文本行（注意这个“行”字），"1保存的内容是最最近一次删除的内容（也就是说最后一次执行删除命令保存的内容）"2保存的是倒数第二次删除的内容，依此类推，直到"9，如果又有新的操作，那么"9的内容将会被"8的内容替换，先前”9的内容将被丢弃。 

	那么p（put）命令粘贴是哪个寄存器中的内容呢？有时候是粘贴的是"1寄存器的，有时粘贴的是"0寄存器中的，但是总的原则就是粘贴最近一次删除或者复制的内容，如果删除是最近的一次，就是粘贴"1的，也就是粘贴刚刚删除的文本，如果复制是最近的一次操作，那么粘贴的内容是"0中的，也就是粘贴刚刚复制的内容。

	字母寄存器：
	"a，"b，"c...都是字母寄存器，也许你执行:reg的时候看不到这些命令，不要紧，稍后就有了。之前粘贴我们用的都是p命令，如果我想粘贴其他寄存器里面的内容呢，你想到了吗？答案就是：寄存器的名称+p。现在我们新建一个字母寄存器，把当前三行保存到"a寄存器中去，具体操作如下：在normal模式下输入"a3yy，这样当前三行就保存在"a中去了，粘贴同样在normal模式下，"3p 即可。如果是大写字母的寄存器，如执行："Cdd：他的作用是把当前行删除，再把内容追加到"c寄存器中，也就是说字母寄存器没有大写之分，只是功能上有区别，大写就是追加，小写是替换。

	其他寄存器：
	""：无名寄存器，p命令粘贴的内容，保存最近一次删除或复制的内容。
	“-：（-是个减号）小删除寄存器（small delete register），前面说过要您注意这个”行“字，也就是说并不是所有删除的文本都会保存在数字寄存器中，如果你删除的只是一个单词或字母： dw或者x，那么这个单词并不会保存在"1寄存器中，而是保存在"-寄存器里面。所有不包含换行符的删除都会保存在此寄存器中。

	"* ：这个就是系统寄存器喽，最开始的问题的第二个答案知道了吧 

	当然还有一些寄存器，这里就不一一介绍了。

Vim寄存器<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


缩进
normal 模式下：

>>  当前行增加缩进
<<  当前行减少缩进




 	
元字符

匹配对象

. 点号 匹配单个任意字符

[abc] 字符组 匹配abc中的任意单个字符，写正则表达式的时候"["和"]"需要用"\"转义

[^abc] 排除型字符组 匹配abc之外的任意单个字符，"["同样需要转义

\char 转义字符 匹配char对应的普通字符，例如char是*，那么\*就匹配*


提供计算功能的元字符 
？ 问号 匹配一次或0次

* 星号 匹配任意次或0此

+ 加号 至少匹配一次

{min,max} 区间量词 至少匹配min次，至多匹配max次

匹配位置的元字符

^ 脱字符 匹配一行的开头处

$ 美元符 匹配一行的结尾处

\< 单词分界符 匹配单词的开始位置

\> 单词分界符 匹配单词的结束位置

其他元字符

| 多选（alternation） 匹配任意分隔的表达式，写正则时需要写成"\|"

(…) 括号 限定多选结构的范围，同样"("和")"需要转义

\1 \2 … 反向引用 匹配之前第一组括号，第二组括号...中匹配的文本


文件保存高级篇
:w new_file：将缓冲区内容保存为new_file文件，原文件内容不更改。
:20,$w new_file：将文件20行处到结尾保存为new_file文件
:.,20w new_file ：将光标所在行到第20行保存为new_file 文件
:20,30w >> new_file：追加20至30行内容到new_file文件中


一个文件copy到另一文件
:r filename：把filename中的内容插入到光标所在行的下一行
:100r filename :把filename中的内容插入到100行的后面
:$r filename：插入行尾
:0r filename :插入行首
:/parttern/r filename ：还可以使用正则表达式，插入到匹配出的后面一行，需要注意的是如果有多处匹配，它只插入到首个匹配的地方。


标记
标记又称为书签，在某个位置打上标记后，在别处编辑完，通过命令可以回到标记处（以下命令模式中执行）

mx  将当前位置标记诚x（此处的x可以是热任意字母）
'x  （单引号）光标移到标记x处的行首
`x   (反引号）光标移到标记x处
``  （双反引号）当前光标处于标记处来回切换
''  （双引号） 当前光标所在行处与标记处来回切换，光标定位在行首

:marks 取得所有的标记的列表

你会注意到有一些特殊的标记，包括：
        '       跳转前的位置 
        "       最后编辑的位置 
        [       最后修改的位置的开头 
        ]       最后修改的位置的结尾 


ab命令：
ab命令可以将一长串字符用缩写来定义，这有点象Linux中的alias，比如Linux中的ll命令就是ls -l的别名，ab的语法为：

:ab abbr phrase
abbr就是对phrase的简写，在insert 模式中，输入abbr，再按非字母字符（比如空格，点号等）Vim就自动把phrase插入到光标处位置。此情景一般用在频繁输入的字符中，通常建议abbr选择使用频率很低的字符，比如Eclipse常用的一个快捷键syso，你可以定义成如下：
:ab syso  public static void main(String[] args) 

这样一来，每次输入syso的时候，整个main方法就自动插入到文本行了。如果你就是想输入'syso'这个原生字符串，那么您可以用下面这个命令取消：
:unab syso

列出当前定义的缩写有哪些可以用命令：
:ab

 :abbreviate 作用于所有模式   （ab） 
 :iabbrev    仅作用于插入模式 （iab）
 :cabbrev    仅作用于命令行模式（cab）

写程序追求的高内聚，低耦合，同样，毫无疑问，Vim也遵循同样的原则，如果我们有上十条百条这样的缩写命令，如果都挤在vimrc配置文件中，这样过显得很难管理，因此我们可以把专门用于缩写的命令放置在单独的文件中，然后在vimrc文件中引用就ok，:source $VIM/abbreviation.vim



map命令
map的功能比ab更强大，它不仅可以在insert 模式下定义宏（快捷键）而且可以normal，visual等模式下定义。其语法举例说明：（目标：在normal下用lv选中光标所在行）

:map lv 0v$ 
解析：0代表光标移至行首，v就是visual模式（该模式下可以通过hjkl来选中文本），$代表行尾，这样一来，在normal模式输入lv就能选中光标所在行了。

:map 列出所有已定义的映射命令
:unmap lv 取消lv映射的命令
:mapclear  清空所有映射
需要注意的是：

1.默认情况下，map命令是作用在normal模式下的

2.如果是想在virsual模式下新建某个命令的宏，可以使用:vmap，举例：:vmap d <esc>dd就可以在virsual模式下把光标所在行删除。<esc>是纯粹的5个原始字符，意思是回到normal模式。

3.默认情况下，map是采用递归映射的，比如a映射成b，:map a b，然后c 又映射成了a，:map c a ，那么最终c也会自动映射成b，等同于:map c b，您现在可以试一试a,b,c的效果都是光标向前移动一个单词的长度。如果要不想使用递归，那么就要用:noremap

4.现在你应该能看明白上图的内容了吧，第一列就是宏会在哪中模式下生效，第二列代表快捷键了，第三列就是真正的命令序列集合了。您可以注意一下最后一个命令：（Shift+Insert）就是前些天分享过的，代表在normal模式下粘贴系统剪切板中的内容。


多窗口
默认情况下，Vim只为一个session打开一个窗口，可以用参数**-o**来打开多个窗口，如:vim -o file1 fiel2，默认这个session会水平分割两个窗口显示，另外参数o后面还可以跟数字:vim -o3 file1 file2 这样Vim会打开三个窗口，最后一个窗口会留空白.

水平分割窗口
:split             当前窗口一分为二，两个窗口显示相同内容。  
:10split           新窗口的高度10行
:split otherfile   新窗口中打开otherfile   
:new               功能和split一样  
:sp                split的缩写形式  
:q                 关闭当前窗口

垂直分割窗口
:vsplit 以上所有命令都适用于打开垂直分割窗口，只要在前面加v(vetical)

调整窗口尺寸
gvim鼠标支持拖拉动作来改变窗口大小。我想你不会这么做，命令行才是高效率工作。
ctrl+w结合+-= 当然+-=前面可以接数字，分表代表增大、减小、均分窗口。
resize -4 明确指定窗口减少多少
ctrl+w结合< > 增加窗口宽度



标签页（tab）
把一个窗口移动标签页的技巧，命令：ctrl+w+T

新建标签页
:tabe        新建未命名的标签页
:tabe file   在新标签页中打开或新建文件file 
:tabnew      和tabe命令功能一样
:tab split   在新标签页中打开当前窗口（缓冲区）的文件
:tabf *.txt  当前目录搜索匹配*.txt的文件，在新标签页打开。
             该命令只能打开一个文件，如果该正则表达式匹配了多个文件，则提示“文件名过多”而无法打开。
列出标签页
:tabs   列出已打开的标签列表，">"表示当前标签页 


切换标签页
:tabn    移动到一个标签页（next）
:tabp    移动到上一个标签页（previous）
gt       等效于:tabn
gT       等效于:tabp
:tabfirst  移到第一个标签页
:tabr      等效于tabfirst
:tablast   移到最后一个标签页
:tabm 0      移到第一个标签页
:tabm       当前标签移到最后
标签移到两端时会循环移动

关闭标签页
:tabc    关闭当前标签页
:tabo    关闭当前标签以外的标签页 
:set showtabline=0   关闭标签页菜单
:set showtabline=1   显示标签页菜单


Vim用命令foldmethod实现折叠功能，一共有六种折叠方式，可以用:set foldmethod查看当前session用的是哪种折叠，默认vim使用manual（手动）方式。

manual
手工折叠是最基本的折叠方式，在处理小块文件的时候简单实用。
:set foldmethod=manual

zf   创建折叠（fold creation）
zo   打开折叠(open)
zc   再次折叠起来(close)
举例说明：

v{motion}zf  折叠V模式下选中的文本。（这里的v{motion}指的是Shift+v）。
zf\`a    折叠当前光标处到标记a处的文本 （`ma`就表示在当前光标出做a标记）      
zf3j     折叠当前光标出下3行
zf10G    从当前行折叠至第20行
zfgg     折叠至行首
zf%      光标移至'{'时，vim会去匹配'}'，这样'{}'之间的内容就可以折叠起来


indent
vim自动根据缩进折叠，缩进量与折叠行的嵌套深度关系有shiftwidth控制，通过设置:set foldlevel=num，num代表数字。foldlevel=0时关闭所有折叠，等价于zM，zR设置折行为最大值



Visual 模式
normal 模式下，命令对应的Visual表如下：
v         基于字符的Visual模式
V         基于行的Visual模式
Ctrl+v    基于块的Visual 模式
gv        重新选取最后一次使用Visual模式选中的文本


Visual模式之间的切换
如果当前是在字符Visual模式下，V就能切换到基于行的Visual模式，Ctrl+v就是切换到基于块的Visual模式下，来回的按v能在normal模式和字符Visual模式下切换。此规则同样适用与另外两种Vrsual模式。

命令：viw。它的作用是选取一个单词（word），无论光标在这个单词的哪个位置都能选中整个单词

Text-Object：可以指一个单词，一整句文本，抑或一对括号内的文本，甚至是html或xml标签内的文本，都可以抽象成Text-Object。与Text-Object紧密相关的两个命令就是a和i，啊？这两个命令不是append和insert吗？其实，a和i操作在Visual mode或者某些操作（比如：d,y等）后面就是另外一种效果了。例如，删除一个单词可以用daw或者diw。那么a与i又有什么区别呢？

** a会选择一个对象（an object）包括空格在内，而i只会选择一个对象的内部（an inner object）不包含空格。**

下面就是一些命令含义：
aw   a word
iw   inner word
aW   a WORD   
iW   inner WORD
as   a sentence
is   inner sentence
ap   a paragraph
ip   inner paragraph
a[|]   a[] block （这里的'|'是或的意思，也就是说'a['和'a]'都表示一个[]块）
'{} &al;>()与[]作用类似
at   a  tag （这里的tag可以是html或xml中任何标签对）
it   inner tag
比如在一个html文件中，当前光标在某个标签对的内容里头的时候，命令dat会把整个标签对包括内容都会删除，而dit只会删除标签对之间的内容，保留标签对。详细说明可以:help text-objecgts

ps1:
a.光标定位到代码块的行首，Ctrl+v进入Visual-block模式
b.光标向下移动，直到选择所有代码行的第0列
c.输入I（光标前插入字符），此时你会发现光标跳到了代码块的开头处，此时已经是insert 模式了，现在就插入python的注释字符'#'
d.按Esc键，此时你会发现代码块所选区域都打上了注释符号

ps2:
在行末都加上分号
Ctrl+v jj$，这样就能选中到每一行的行末。接着输入A命令表示在行末追加字符，输入“;”再按Esc大功告成了。




乱码问题
如果碰到了乱码问题，只要你把enc，fenc统一设成utf-8问题都会解决了。下面这段配置就是我的Vimrc文件的关于解决乱码配置的代码段：

" 设置vim内部编码格式
set encoding=utf-8

" 解决windows下如果encoding设置utf-8，菜单会乱码问题
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"默认文件编码
set fileencoding=utf-8 
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1





复读机在按下复读的按钮后，就开机录制需要复读的内容，再按一下录制完成，接下来就可以播放了。Vim中也有与之惊人相似的操作，如果想重复某个操作，就可以用**宏**来完成，还记得以前讲过的一个命令吗：.就是这个**点**可以重复执行最后一次操作，但是这个.的功能比较弱，没法组合使用，如下代码，想在每行末加上分号";"：

int a = 1
int b = 2
int c = a+b
print a
print b
print c
如果是用.来实现的话，首先在第一行执行$a;，然后重复5次执行j$.，这样算下来你要敲击的键总数在15次之多，但是我们用Record/Play的话，即使是100行代码，按键也不会超过10次。命令闪亮登场：q，就是这个q，它的威力很猛。接下来就详细介绍如何操作q来实现上述需求。

1.normal 模式下输入q启动recoding，q后面跟任意a-z的小写字母比如m，这个字母就是宏的名字，接下来你要执行的操作就会记录在这个宏中。
2.执行我们的任务：“行末加分号”，命令是：$a;<Esc>j$，这条命令意思就是：移动行尾插入分号，退到normal模式，光标移动到下一行的末尾。
3.再次输入q，表示录制结束
4.录制结束后我们就可以play了，输入@m就会执行宏中的操作，m是第一步中使用的宏的名称，5@m表示重复执行5次。这样，所有行都给加上分号了，真是好使。

再举一例：实现如下效果：从1到100，每行+1。
1
2
3
...
100
命令：首先在第一行插入1，然后光标定位了“1”处，进入normal模式，开始录制：qmyyp<Ctrl>aq，（解释：yyp：拷贝一行再粘贴在新的一行，<Ctrl>a：数字+1）后然执行98@m，收工。




行复制与移动
copy命令格式：:[range]copy{address}，range表示拷贝范围，address表示目标地址。
我们可以用:1copy.把第一行拷贝到光标的下一行（.代表当前行），如果三行全拷贝：:1,3copy.，copy的另外两个写法:co或者:t。 常用命令：
:3t. 拷贝第三行到当前光标的下一行
:t3 拷贝当前行到第三行的下一行
:t. 拷贝当前行到光标的一下行，相当于Yp和yyp
:t$ 拷贝当前行到最后一行
:'<,'>t0 拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着t0。


move：move的操作完全和copy是一样的，它的简写格式有mo和m。可以对照上面的例子重复操作一遍。更多帮助可以查看:h :move和:h copy。




filetype---- 文件类型检测
执行:filetype可以查看Vim的文件类型检测功能是否已打开，默认你会看到：detection:ON plugin:OFF indent:OFF。下面详细介绍这三个参数的具体含义。

detection：默认情况vim会对文件自动检测文件类型，也就是你看到的'detection:ON'，同样你可以手动关闭:filetype off。

plugin：如果plugin状态时ON，那么就会在Vim的运行时环境目录下加载该类型相关的插件。比如为了让Vim更好的支持Python编程，你就需要下载一些Python相关的插件，此时就必须设置plugin为ON插件才会生效，具体设置方法就是:filetype plugin on

indent：不同类型文件有不同的方式，比如Python就要求使用4个空格作为缩进，而c使用两个tab作为缩进，那么indent就可以为不同文件类型选择合适的缩进方式了。你可以在Vim的安装目录的indent目录下看到定义了很多缩进相关的脚本。具体设置方法：filetype indent on。

 可以用:set filetype查看当前文件是什么类型




高亮所有搜索模式匹配

:set hlsearch 高亮所有匹配字符串
:set nohlsearch 彻底关闭


全局命令
全局命令在Vim中有这举足轻重的作用，特别对于那些重复性的工作尤为有效，它能对匹配的所有行执行某个命令，先来看看它的语法：

:[range]global[!]/{pattern}/{command}

[range]指定作用范围，默认global命令作用于整个文件，不像:normal等命令，normal默认是作用于当前行。

{pattern}：对于range范围内的文本，如果匹配pattern，就会执行command，[!]：相当于取反（也可以用vglobal），也就是不匹配patten的行。

command默认是print，打印文本行。


举例：
ps1.实现Linux命令tac的功能（与cat对应的一个命令，反向输入文本行）
:g/^/m 0 这里的^表示所有行（包括空行），.表示非空行，m 0表示将当前行移至第0行。这样就实现了tac的功能。

ps2.排序：对于下面的css片段:

div{
    border:0;
    margin:0;
    padding:0;
    font-size:12px;
    font:inherit;
    vertical-align:baseline;
}
我们想把{}中的样式按照字母的顺序排列成如下:

div{
    border:0;
    font-size:12px;
    font:inherit;
    margin:0;
    padding:0;
    vertical-align:baseline;
}
我们可以使用命令：:g/{/ .+1,/}/-1 sort，这个命令看起来很复杂，好像也不符合global的语法。其实对于global语法，可以扩展成：:g/{pattern}/[range][cmd]，就是说cmd前面还可以指定range.因此我们可以把上面的命令来做一次剖析：

.+1,/}/-1 sort 这个命令就相当于[range][cmd]，这里的range范围为：当前行（.）的下一行（+1）直到（,）匹配（}）的前一行（-1）。如此一来这条完整的命令就好解释了，表示{的下一行一直到}的上一行执行sort命令。

费了这么大心思就为了这么一小块代码排个序，看似有点不值，完全可以把大括号里面的内容选中后执行sort就得了嘛，干嘛这么费劲啊，你可别忘了，global的厉害，它可以作用于这个文件，如果css文件有上百行，甚至千行，如果使用V模式执行sort麻烦可大了。




							vim手册  :  https://github.com/wsdjeg/vim-galore-zh_cn