(参考 http://www.runoob.com/linux/linux-vim.html 》》vi/vim 按键说明) 
第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等
移动光标的方法
h 或 向左箭头键(←) 	光标向左移动一个字符
j 或 向下箭头键(↓) 	光标向下移动一个字符
k 或 向上箭头键(↑) 	光标向上移动一个字符
l 或 向右箭头键(→) 	光标向右移动一个字符
如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！
[Ctrl] + [f] 	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
[Ctrl] + [b] 	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)
[Ctrl] + [d] 	屏幕『向下』移动半页
[Ctrl] + [u] 	屏幕『向上』移动半页
+ 	光标移动到非空格符的下一行
- 	光标移动到非空格符的上一行
n<space> 	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
$ 或功能键[End] 	移动到这一行的最后面字符处(常用)
H 	光标移动到这个屏幕的最上方那一行的第一个字符
M 	光标移动到这个屏幕的中央那一行的第一个字符
L 	光标移动到这个屏幕的最下方那一行的第一个字符
G 	移动到这个档案的最后一行(常用)
nG 	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
gg 	移动到这个档案的第一行，相当于 1G 啊！ (常用)
n<Enter> 	n 为数字。光标向下移动 n 行(常用)
搜索替换
/word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
?word 	向光标之上寻找一个字符串名称为 word 的字符串。
n 	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N 	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！
:n1,n2s/word1/word2/g 	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。(常用)
:1,$s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
:1,$s/word1/word2/gc 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)
删除、复制与贴上
x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
dd 	删除游标所在的那一整行(常用)
ndd 	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
d1G 	删除光标所在到第一行的所有数据
dG 	删除光标所在到最后一行的所有数据
d$ 	删除游标所在处，到该行的最后一个字符
d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy 	复制游标所在的那一行(常用)
nyy 	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
y1G 	复制游标所在行到第一行的所有数据
yG 	复制游标所在行到最后一行的所有数据
y0 	复制光标所在的那个字符到该行行首的所有数据
y$ 	复制光标所在的那个字符到该行行尾的所有数据
p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
J 	将光标所在行与下一行的数据结合成同一行
c 	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u 	复原前一个动作。(常用)
[Ctrl]+r 	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
. 	不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)


第二部份：一般模式切换到编辑模式的可用的按钮说明
进入插入或取代的编辑模式
i, I 	进入插入模式(Insert mode)：
i 为『从目前光标所在处插入』， I 为『在目前所在行的第一个非空格符处开始插入』。 (常用)
a, A 	进入插入模式(Insert mode)：
a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光标所在行的最后一个字符处开始插入』。(常用)
o, O 	进入插入模式(Insert mode)：
这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插入新的一行』； O 为在目前光标所在处的上一行插入新的一行！(常用)
r, R 	进入取代模式(Replace mode)：
r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)
上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！
[Esc] 	退出编辑模式，回到一般模式中(常用)


第三部份：一般模式切换到指令行模式的可用的按钮说明
指令行的储存、离开等指令
:w 	将编辑的数据写入硬盘档案中(常用)
:w! 	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！
:q 	离开 vi (常用)
:q! 	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
:wq 	储存后离开，若为 :wq! 则为强制储存后离开 (常用)
ZZ 	这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
:w [filename] 	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename] 	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
:n1,n2 w [filename] 	将 n1 到 n2 的内容储存成 filename 这个档案。
:! command 	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如
『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！
vim 环境的变更
:set nu 	显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu 	与 set nu 相反，为取消行号！

特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。

举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。


零散记录>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
字符移动

k            上移                k
h            左移            h        l
l            右移                j
j            下移


单词移动
W w            移动到下一个单词开头
E e            移动到下一个单词结尾
B b            倒退到上一个单词开头

j k也是移动到上一行和下一行，但它们移动的是光标所在的位置
+ -不管你的光标在何处，总是移动到下一行或上一行的行首


整行移动

0            移动到行首
$            移动到行末
+            移动到下一行开头
-            移动到上一行开头



滚屏
Ctrl+f            往前滚动一整屏
Ctrl+b            往后滚动一整屏
Ctrl+d            往前滚动半屏
Ctrl+u            往后滚动半屏

Ctrl+e            往后滚动一行        
Ctrl+y            往前滚动一行



用z调整光标
z<Enter>        将光标所在行移动到屏幕顶端
z.              将光标所在行移动到屏幕中间
z-              将光标所在行移动到屏幕低端

在屏幕中移动

H            移动到屏幕顶端的行
M            移动到屏幕中央的行
L            移动到屏幕底端的行

nH           移动到屏幕顶端往下的第n行
nL           移动到屏幕顶端往上的第n行


根据文本块移动
所谓的文本块也就是句子、段落、小节等

（            移动到当前句子开头
）            移动到下一个句子开头
{            移动到当前这一段开头   
}            移动到下一段开头
[[           移动到当前这一节的开头
]]           移动到下一节的开头

其中，VIM以? . !等符号来标记一个句子

空白行来标记一个段落

用节宏来标记一个节（节宏是什么我还没搞清楚）


根据行号来移动

Ctrl+g            显示当前行信息
nG                转至第n行
G                 转至文本末尾
gg　　　　　　　　   移至文本开头


字符位置插入

i            在光标之前插入
a            在光标之后追加


行位置插入

A            在一行的结尾处追加
I            在一行的开头处插入
o            在光标所在位置的下一行打开新行插入
O            在光标所在位置的上一行打开新行插入

tips1：10i*<Esc>先输入10,然后输入i，接着输入*号，最后按<Esc>
　　  　这样就可以在一行开头输入十个*

合并行 J
合并7行  7J


字符删除

x            删除光标所在处字符
X            删除光标所在前字符



单词删除

dw            删除到下一个单词开头
de            删除到本单词末尾
dE            删除到本单词末尾包括标点在内
db            删除到前一个单词
dB            删除到前一个单词包括标点在内


行删除

dd            删除一整行
d$          删除光标位置到本行结尾
d0            删除光标位置到本行开头


字符替换

r            单个字符替换
R            连续替换
～           更改大小写

tips：4～更改连续4个字符的大小写，很有意思


单词修改

cw            从光标处修改到单词结尾
cb            从光标处修改到单词开头


行修改

c$            从光标修改到本行末尾
C             功能同上
c0            从光标修改到本行开头
cc            删除整行从头修改
S             功能同上
s             删除光标所在位置的字符，然后插入

tips:c 功能和d相同，区别在于完成删除操作后进入INSERT MODE

粘帖

p            粘帖                  


单词和字符复制

ynl            向右复制n个字符
ynh            向左复制n个字符
ynw            向前复制n个单词
ynb            向后复制n个单词


行复制

y0            复制到行首
y$            复制到行末
yy            复制整行
yH            从当前行复制到屏幕顶端
yL            从当前行复制到屏幕低端


剪切

说完了复制这里顺便把剪切的命令也说下
其实剪切很简单，就是先删除，然后按p粘帖
比如dd删除一行后，这一行会被放入缓冲区
接着移动到你想放置的位置，按p，就被粘帖好了


恢复

u            撤消上次命令
U            恢复整行
ctrl+r       重做
.            重复
e！          全文恢复



Vim快速选中、删除、复制引号或括号中的内容
以下命令可以对标点内的内容进行操作。
ci'、ci"、ci(、ci[、ci{、ci< - 分别更改这些配对标点符号中的文本内容
di'、di"、di(或dib、di[、di{或diB、di< - 分别删除这些配对标点符号中的文本内容
yi'、yi"、yi(、yi[、yi{、yi< - 分别复制这些配对标点符号中的文本内容
vi'、vi"、vi(、vi[、vi{、vi< - 分别选中这些配对标点符号中的文本内容

另外如果把上面的i改成a可以连配对标点一起操作。


更大范围的移动：
*         当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；
#         当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；
g_      到本行最后一个不是 blank 字符的位置。
fa      到下一个为 a 的字符处，你也可以fs到下一个为s的字符。
3fa        在当前行查找第三个出现的 a.


替换和删除
nrc 用 c 替换光标所指向的前 n 个字符;
5rA 用 A 替换光标所指向的前 5 个字符;

s 用输入的正文替换光标所指向的字符;
S 删除当前行，并进入插入模式;
ns 用输入的正文替换光标右侧 n 个字符;
nS 删除当前行在内的 n 行，并进入插入模式;
cW 用输入的正文替换从光标到行尾的所有字符（同 c$ );


复制粘贴
p               小写字母 p，将缓冲区的内容粘贴到光标的后面；
P               大写字母 P，将缓冲区的内容粘贴到光标的前面。

“+y          复制 1 行到操作系统的粘贴板；
“+nyy          复制 n 行到操作系统的粘贴板。



命令模式下，可以规定命令操作的行号范围。数值用来指定绝对行号；字符“.”表示光标所在行的行号；字符符“$”表示正文最后一行的行号；简单的表达式，例如“.+5”表示当前行往下的第 5 行。例如：

:345                  将光标移到第 345 行
:345w file          将第 345 行写入 file 文件
:3,5w file          将第 3 行至第 5 行写入 file 文件
:1,.w file          将第 1 行至当前行写入 file 文件
:.,$w file          将当前行至最后一行写入 file 文件
:.,.+5w file          从当前行开始将 6 行内容写入 file 文件
:1,$w file          将所有内容写入 file 文件，相当于 :w file 命令


字符串搜索

:/str/                正向搜索，将光标移到下一个包含字符串 str 的行
:?str?                反向搜索，将光标移到上一个包含字符串 str 的行


Vim中的正则表达式
下表给出大多数特殊字符和它们的含义：

^               放在字符串前面，匹配行首的字；
$               放在字符串后面，匹配行尾的字；
\<             匹配一个字的字头；
\>             匹配一个字的字尾；
.               匹配任何单个正文字符；
[str]           匹配 str 中的任何单个字符；
[^str]         匹配任何不在 str 中的单个字符；
[a-b]           匹配 a 到 b 之间的任一字符；
*               匹配前一个字符的 0 次或多次出现；
\               转义后面的字符。

ps:
:/^string/


正文替换
利用 :s 命令可以实现字符串的替换。具体的用法包括：

:%s/str1/str2/      用字符串 str2 替换行中首次出现的字符串 str1
:s/str1/str2/g      用字符串 str2 替换行中所有出现的字符串 str1
:.,$ s/str1/str2/g  用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1
:1,$ s/str1/str2/g  用字符串 str2 替换正文中所有出现的字符串 str1
:g/str1/s//str2/g    功能同上
:m,ns/str1/str2/g    将从m行到n行的str1替换成str2

`g` 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 `g`，表示只对搜索字符串的首次出现进行替换；`g` 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;
`s` 表示后面跟着一串替换的命令；
`%` 表示替换范围是所有行，即全文。



删除正文
在命令模式下，同样可以删除正文中的内容。例如：

:d                            删除光标所在行
:3d                          删除 3 行
:.,$d                          删除当前行至正文的末尾
:/str1/,/str2/d              删除从字符串 str1 到 str2 的所有行
:g/^\(.*\)$\n\1$/d              删除连续相同的行，保留最后一行
:g/\%(^\1$\n\)\@<=\(.*\)$/d     删除连续相同的行，保留最开始一行
:g/^\s*$\n\s*$/d                删除连续多个空行，只保留一行空行
:5,20s/^#//g                    删除5到20行开头的 # 注释

总之，Vim的初级删除命令是用 d ，高级删除命令可以用 正则替换 的方式执行。




恢复文件

Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项



Shell切换

当处于编辑的对话过程中时，可能需要执行一些Linux命令。如果需要保存当前的结果，退出编辑程序，再执行所需的Linux命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行Linux命令就要省事得多。在Vim中，可以用下面的命令来做到这一点：

:!shell_command   执行完 shell_command 后回到Vim



分屏
普通的Vim模式，打开一个Vim程序只能查看一个文件，如果想同时查看多个文件，就需要用到Vim分屏与标签页功能。
Vim的分屏，主要有两种方式：上下分屏（水平分屏）和左右分屏（垂直分屏），在命令模式分别敲入以下命令即可：

:split file2（可用缩写 :sp）            上下分屏；
:vsplit file2（可用缩写 :vsp）        左右分屏。

另外，也可以在终端里启动vim时就开启分屏操作：
vim -On file1 file2...   打开 file1 和 file2 ，垂直分屏
vim -on file1 file2...   打开 file1 和 file2 ，水平分屏

理论上，一个Vim窗口，可以分为多个Vim屏幕，切换屏幕需要用键盘快捷键，命令分别有：
Ctrl+w+h            切换到当前分屏的左边一屏；
Ctrl+w+l            切换到当前分屏的右边一屏；
Ctrl+w+j            切换到当前分屏的下方一屏；
Ctrl+w+k            切换到当前分屏的上方一屏。

即键盘上的h,j,k,l 四个Vim专用方向键，配合Ctrl键和w键（window的缩写），就能跳转到目标分屏。



签页
Vim的标签（Tab）页，类似浏览器的标签页，一个标签页打开一个Vim的窗口，一个Vim的窗口可以支持N个分屏。

在Vim中新建一个标签的命令是：
:tabnew

如果要在新建标签页的同时打开一个文件，则可以在命令后面直接附带文件路径：
:tabnew filename

Vim中的每个标签页有一个唯一的数字序号，第一个标签页的序号是0，从左向右依次加一。关于标签页有一系列操作命令，简介如下：

:tabN[ext]              跳到上一个标签页
:tabn[ext]              转到下一个标签页
:tabc[lose]             关闭当前标签页
:tabdo                  为每个标签页执行命令
:tabe[dit]              在新标签页里编辑文件
:tabf[ind]              寻找 'path' 里的文件，在新标签页里编辑之
:tabfir[st]             转到第一个标签页
:tabl[ast]              转到最后一个标签页
:tabm[ove]  N           把标签页移到序号为N位置
:tabnew [filename]      在新标签页里编辑文件
:tabo[nly]              关闭所有除了当前标签页以外的所有标签页
:tabp[revious]          转到前一个标签页
:tabr[ewind]            转到第一个标签页